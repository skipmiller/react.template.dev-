// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For connection pooling with Prisma and PgBouncer
  directUrl = env("DATABASE_DIRECT_URL")
}

// Example User model (commented out for now)
// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   role          Role      @default(USER)
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   posts         Post[]
//   accounts      Account[]
//   sessions      Session[]
// }

// Example Account model for OAuth (commented out for now)
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([provider, providerAccountId])
// }

// Example Session model (commented out for now)
// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// Example Post model (commented out for now)
// model Post {
//   id        String   @id @default(cuid())
//   title     String
//   content   String?  @db.Text
//   published Boolean  @default(false)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   authorId  String
//   author    User     @relation(fields: [authorId], references: [id])
// }

// Example enum (commented out for now)
// enum Role {
//   USER
//   ADMIN
// } 